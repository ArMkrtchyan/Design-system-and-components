Index: app/src/main/java/am/acba/components/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package am.acba.components\r\n\r\nimport am.acba.component.badge.PrimaryBadge\r\nimport am.acba.component.button.PrimaryActionTextButton\r\nimport am.acba.component.exchange.ExchangeRate\r\nimport am.acba.component.extensions.getColorFromAttr\r\nimport am.acba.component.extensions.getColorStateListFromAttr\r\nimport am.acba.component.input.PrimaryInput\r\nimport am.acba.components.databinding.ActivityMainBinding\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport androidx.core.view.isVisible\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private val binding by lazy { ActivityMainBinding.inflate(layoutInflater) }\r\n\r\n    companion object {\r\n        var darkTheme = false\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(if (darkTheme) am.acba.component.R.style.ACBA_Theme_Dark else am.acba.component.R.style.ACBA_Theme_Light)\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(binding.root)\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n        binding.initView()\r\n    }\r\n\r\n    private fun ActivityMainBinding.initView() {\r\n        setSupportActionBar(toolbar)\r\n        listItem.showBadge()\r\n        binding.dropDown.setOnClickListener {\r\n            binding.dropDown.addFocus()\r\n        }\r\n\r\n        listItem.badge.setBadgeType(PrimaryBadge.BadgeType.TEXT)\r\n        listItem.badge.setBadgeText(\"Առաջարկ\")\r\n        listItem.badge.setBadgeTextColor(this@MainActivity.getColorFromAttr(am.acba.component.R.attr.contentWarning))\r\n        listItem.badge.setBadgeBackgroundTint(this@MainActivity.getColorStateListFromAttr(am.acba.component.R.attr.backgroundWarning))\r\n\r\n        input.apply {\r\n            setEndIconOnClickListener { Toast.makeText(this@MainActivity, \"Click\", Toast.LENGTH_SHORT).show() }\r\n            setStartIconOnClickListener { Toast.makeText(this@MainActivity, \"Click\", Toast.LENGTH_SHORT).show() }\r\n            setOnFocusChangeListener { _, _ ->\r\n\r\n            }\r\n        }\r\n        buttonSec.apply {\r\n            setOnClickListener {\r\n                input.apply {\r\n                    isErrorEnabled = false\r\n                }\r\n            }\r\n        }\r\n        buttonPr.apply {\r\n            setOnClickListener {\r\n                input.apply {\r\n                    isErrorEnabled = true\r\n                    error = \"Error\"\r\n                }\r\n            }\r\n        }\r\n        buttonGhost.apply {\r\n            setOnClickListener {\r\n                this@MainActivity.findViewById<PrimaryInput>(R.id.input).apply {\r\n                    clearFocus()\r\n                }\r\n            }\r\n        }\r\n        exchangeRates.apply {\r\n            setOnClickListener {\r\n                binding.dropDown.removeFocus()\r\n            }\r\n            val firstRate = ExchangeRate(am.acba.component.R.drawable.flag_usa, \"$ 406.00\", \"$ 410.50\")\r\n            val secondRate = ExchangeRate(am.acba.component.R.drawable.flag_russian, \"₽ 4.30\", \"₽ 4.72\")\r\n            val thirdRate = ExchangeRate(am.acba.component.R.drawable.flag_usa, \"€ 435.50\", \"€ 452.00\")\r\n            val rates = Triple(firstRate, secondRate, thirdRate)\r\n            setExchangeRates(rates)\r\n        }\r\n        switcher.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (buttonView.isPressed) {\r\n                darkTheme = isChecked\r\n                recreate()\r\n            }\r\n        }\r\n        search2.setOnClickListener { Toast.makeText(this@MainActivity, \"Click\", Toast.LENGTH_SHORT).show() }\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/am/acba/components/MainActivity.kt b/app/src/main/java/am/acba/components/MainActivity.kt
--- a/app/src/main/java/am/acba/components/MainActivity.kt	
+++ b/app/src/main/java/am/acba/components/MainActivity.kt	
@@ -1,20 +1,21 @@
 package am.acba.components
 
 import am.acba.component.badge.PrimaryBadge
-import am.acba.component.button.PrimaryActionTextButton
 import am.acba.component.exchange.ExchangeRate
 import am.acba.component.extensions.getColorFromAttr
 import am.acba.component.extensions.getColorStateListFromAttr
 import am.acba.component.input.PrimaryInput
 import am.acba.components.databinding.ActivityMainBinding
+import android.graphics.Rect
 import android.os.Bundle
-import android.util.Log
+import android.view.MotionEvent
+import android.view.inputmethod.InputMethodManager
+import android.widget.EditText
 import android.widget.Toast
 import androidx.activity.enableEdgeToEdge
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.view.ViewCompat
 import androidx.core.view.WindowInsetsCompat
-import androidx.core.view.isVisible
 
 class MainActivity : AppCompatActivity() {
     private val binding by lazy { ActivityMainBinding.inflate(layoutInflater) }
@@ -36,6 +37,24 @@
         binding.initView()
     }
 
+    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {
+        if (ev?.action == MotionEvent.ACTION_DOWN) {
+            if (ev.action == MotionEvent.FLAG_WINDOW_IS_OBSCURED) {
+                return super.dispatchTouchEvent(ev)
+            }
+            val v = currentFocus
+            if (v is EditText) {
+                val outRect = Rect()
+                v.getGlobalVisibleRect(outRect)
+                if (!outRect.contains(ev.rawX.toInt(), ev.rawY.toInt())) {
+                    v.clearFocus()
+                    val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                    imm.hideSoftInputFromWindow(v.getWindowToken(), 0)
+                }
+            }
+        }
+        return super.dispatchTouchEvent(ev)
+    }
     private fun ActivityMainBinding.initView() {
         setSupportActionBar(toolbar)
         listItem.showBadge()
